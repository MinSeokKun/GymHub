generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/tenant"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_TENANT")
  directUrl = env("DATABASE_URL_TENANT")
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?  @unique
  birth     DateTime?
  memo      String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ptSessions    PTSession[]
  attendances   Attendance[]
  payments      Payment[]
}

model Trainer {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  schedule    String?  @db.Text
  trainerNote String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ptSessions  PTSession[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  ptCount         Int
  durationMonths  Int
  price           Int
  type            ProductType
  description     String?  @db.Text
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  payments        Payment[]
}

model Payment {
  id          Int      @id @default(autoincrement()) 
  memberId    Int
  productId   Int
  startDate   DateTime
  endDate     DateTime
  ptCount     Int
  price       Int
  paidAt      DateTime @default(now())
  memo        String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  member      Member   @relation(fields: [memberId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model PTSession {
  id           Int         @id @default(autoincrement())
  memberId     Int
  trainerId    Int
  scheduledAt  DateTime
  status       SessionStatus @default(reserved)
  note         String?     @db.Text
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  member       Member      @relation(fields: [memberId], references: [id])
  trainer      Trainer     @relation(fields: [trainerId], references: [id])
}

model Attendance {
  id          Int          @id @default(autoincrement())
  memberId    Int
  attendedAt  DateTime
  type        AttendanceType
  memo        String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  member      Member       @relation(fields: [memberId], references: [id])
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductType {
  pt
  gym
  combo
}

enum SessionStatus {
  reserved
  done
  canceled
}

enum AttendanceType {
  general
  pt
}
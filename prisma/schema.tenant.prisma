generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role
  trainer   Trainer? @relation(fields: [trainerId], references: [id])
  trainerId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trainer {
  id          Int      @id @default(autoincrement())
  name        String
  phone       String
  schedule    String?
  trainerNote String?
  user        User[]   // 연결된 User들 (1:1이지만 Prisma에서는 배열로 표현됨)
  ptSessions  PTSession[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Member {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  email     String?   @unique
  birth     DateTime?
  memo      String?
  payments  Payment[]
  ptSessions PTSession[]
  attendances Attendance[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  ptCount       Int
  durationMonths Int
  price         Int
  type          ProductType
  description   String?
  isActive      Boolean  @default(true)
  payments      Payment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id        Int       @id @default(autoincrement())
  member    Member    @relation(fields: [memberId], references: [id])
  memberId  Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  startDate DateTime
  endDate   DateTime
  ptCount   Int
  price     Int
  paidAt    DateTime  @default(now())
  memo      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PTSession {
  id          Int       @id @default(autoincrement())
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    Int
  trainer     Trainer   @relation(fields: [trainerId], references: [id])
  trainerId   Int
  scheduledAt DateTime
  status      PTStatus  @default(reserved)
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id          Int       @id @default(autoincrement())
  member      Member    @relation(fields: [memberId], references: [id])
  memberId    Int
  attendedAt  DateTime
  type        AttendanceType
  memo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  admin
  trainer
}

enum ProductType {
  pt
  gym
  combo
}

enum PTStatus {
  reserved
  done
  canceled
}

enum AttendanceType {
  general
  pt
}
